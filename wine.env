#!/usr/bin/env bash

# Script containing small collection of helper functions for working with Wine.
# The be sourced in shell environment.

SOURCE="${BASH_SOURCE[0]}"
# resolve $SOURCE until the file is no longer a symlink
while [ -h "$SOURCE" ]; do
    SCRIPTDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    [[ $SOURCE != /* ]] && SOURCE="$SCRIPTDIR/$SOURCE"
done
SCRIPTDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Wine and related projects upstream remotes
WINE_MAINLINE_GIT_URI="git://source.winehq.org/git/wine.git"
WINE_STAGING_GIT_URI="https://github.com/wine-staging/wine-staging.git"
WINETRICKS_GIT_URI="https://github.com/Winetricks/winetricks.git"

### Global paths
# assumes the scripts directory is mapped one level below workspace root
WINE_WORKSPACE_PATH="$( cd -P "$( dirname "$SCRIPTDIR" )" && pwd )"
# source paths, relative to workspace
WINE_MAINLINE_SOURCE_PATH="$WINE_WORKSPACE_PATH/mainline-src"
WINE_STAGING_SOURCE_PATH="$WINE_WORKSPACE_PATH/staging-patches"
WINETRICKS_SOURCE_PATH="$WINE_WORKSPACE_PATH/winetricks-src"

# Wine mainline install path
WINE_MAINLINE_INSTALL_PREFIX="$WINE_WORKSPACE_PATH/mainline-install-x86_64"
export PATH="$WINE_MAINLINE_INSTALL_PREFIX/bin:$PATH"
# Wine-Staging install path
WINE_STAGING_INSTALL_PREFIX="$WINE_WORKSPACE_PATH/staging-install-x86_64"

# helper to register Wine-Staging default install path in environment
winestaging_register_path() {
    export PATH="$WINE_STAGING_INSTALL_PREFIX/bin:$PATH"
}
export -f winestaging_register_path

# helper to clean up menus created by wine installs
wine_menuclean() {
    rm -f ~/.local/share/mime/packages/x-wine* \
          ~/.local/share/icons/*-x-wine-*.{xpm,png} \
          ~/.local/share/desktop-directories/wine* \
          ~/.config/menus/applications-merged/wine* && \
    rm -rf ~/.local/share/applications/wine*
}
export -f wine_menuclean

# helper to find pattern in commit message
wine_gitfind() {
    git -C "$WINE_MAINLINE_SOURCE_PATH" log --pretty="format:%Cred%H%Creset %C(cyan)%an%Creset -%C(blue)%d%Creset %s %Cgreen(%ci)(%cr)%Creset" --name-status --grep "$@"
}
export -f wine_gitfind

# helper to show all Wine tags along with release date
wine_listtags() {
    git -C "$WINE_MAINLINE_SOURCE_PATH" log --tags --simplify-by-decoration --pretty="format:%ci %d %s"
}
export -f wine_listtags

# helper to rebase all checked out branches against current master
wine_gitrebase() {
    branches=$(git -C "$WINE_MAINLINE_SOURCE_PATH" branch --color=never | grep -v master)
    echo "$branches" | sed "s/^\* //" | while read branch
    do
        echo "rebasing $branch"
        git -C "$WINE_MAINLINE_SOURCE_PATH" rebase master $branch
        [[ $? -ne 0 ]] && return $?
    done
    git -C "$WINE_MAINLINE_SOURCE_PATH" checkout master
}
export -f wine_gitrebase

# helper to sync local Git repository with upstream
sync_repo() {
    local upstream_url=$1
    local upstream_remote_name=$2
    local source_path=$3
    (
        cd "$source_path"

        git remote rm "$upstream_remote_name"
        git remote add "$upstream_remote_name" "$upstream_url"
        # diagnostics
        git remote -v
        # fetch all heads from all remotes
        git fetch -p --all
        git checkout master
        # ensure we are clean
        git reset --hard "$upstream_remote_name/master"
        # extra clean (configure, aclocal)
        git clean -dxf
        # now get master into local working tree
        git  pull "$upstream_remote_name" master
    )
}

# helper to update local Wine repositories with upstream
wine_update() {
    # mainline
    sync_repo "$WINE_MAINLINE_GIT_URI" winehq "$WINE_MAINLINE_SOURCE_PATH"
    # staging
    sync_repo "$WINE_STAGING_GIT_URI" github "$WINE_STAGING_SOURCE_PATH"
}
export -f wine_update

# helper to call winetricks recipe(s)
winetricks() {
    "$WINETRICKS_SOURCE_PATH/src/winetricks" "$@"
}
export -f winetricks

# helper to update local Winetricks repository with upstream
winetricks_update() {
    sync_repo "$WINETRICKS_GIT_URI" github "$WINETRICKS_SOURCE_PATH"
}
export -f winetricks_update
